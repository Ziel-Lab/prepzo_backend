name: Deploy to EC2 with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Update version information
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          # Update version.py with the git commit
          sed -i "s/GIT_COMMIT = \"unknown\"/GIT_COMMIT = \"$GIT_COMMIT\"/" version.py
          sed -i "s/BUILD_DATE = \".*\"/BUILD_DATE = \"$BUILD_DATE\"/" version.py
          
          echo "Version info updated with commit $GIT_COMMIT and build date $BUILD_DATE"

      - name: Store secrets in AWS Parameter Store
        run: |
          # Store all secrets in AWS Parameter Store
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_URL" --value "${{ secrets.SUPABASE_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_URL"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --value "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_SERVICE_ROLE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_KEY" --value "${{ secrets.SUPABASE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/OPENAI_API_KEY" --value "${{ secrets.OPENAI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store OPENAI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --value "${{ secrets.DEEPGRAM_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store DEEPGRAM_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_URL" --value "${{ secrets.LIVEKIT_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_URL"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --value "${{ secrets.LIVEKIT_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_SECRET" --value "${{ secrets.LIVEKIT_API_SECRET }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_SECRET"
          aws ssm put-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --value "${{ secrets.CARTESIA_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store CARTESIA_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --value "${{ secrets.ELEVENLABS_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store ELEVENLABS_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SERPAPI_KEY" --value "${{ secrets.SERPAPI_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SERPAPI_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GEMINI_API_KEY" --value "${{ secrets.GEMINI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GEMINI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_API_KEY" --value "${{ secrets.PINECONE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_REGION" --value "${{ secrets.PINECONE_REGION }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_REGION"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_HOST" --value "${{ secrets.PINECONE_HOST }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_HOST"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_API_KEY" --value "${{ secrets.GOOGLE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_APPLICATION_CREDENTIALS" --value "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_APPLICATION_CREDENTIALS"
          
          echo "Secrets stored in AWS Parameter Store"

      - name: Create S3 bucket for deployments
        run: |
          BUCKET_NAME="prepzo-bot-deployments"
          
          # Check if bucket exists
          if aws s3api head-bucket --bucket ${BUCKET_NAME} 2>/dev/null; then
            echo "S3 bucket ${BUCKET_NAME} already exists"
          else
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3api create-bucket --bucket ${BUCKET_NAME} --region eu-north-1 --create-bucket-configuration LocationConstraint=eu-north-1
          fi

      - name: Create IAM role for CodeDeploy
        run: |
          # Create IAM role for CodeDeploy
          CODEDEPLOY_ROLE_NAME="PrepzoBotCodeDeployRole"
          
          # Create trust policy for CodeDeploy
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "codedeploy.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${CODEDEPLOY_ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating CodeDeploy role: ${CODEDEPLOY_ROLE_NAME}"
            aws iam create-role --role-name ${CODEDEPLOY_ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Attach required policies
            aws iam attach-role-policy --role-name ${CODEDEPLOY_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
          else
            echo "CodeDeploy role ${CODEDEPLOY_ROLE_NAME} already exists"
          fi
          
          CODEDEPLOY_ROLE_ARN=$(aws iam get-role --role-name ${CODEDEPLOY_ROLE_NAME} --query "Role.Arn" --output text)
          echo "CodeDeploy role ARN: ${CODEDEPLOY_ROLE_ARN}"

      - name: Create EC2 Instance Role
        run: |
          # Create IAM role for EC2 instance
          INSTANCE_ROLE_NAME="PrepzoBotEC2Role"
          
          # Create trust policy for EC2
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${INSTANCE_ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating EC2 instance role: ${INSTANCE_ROLE_NAME}"
            aws iam create-role --role-name ${INSTANCE_ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Create policy for SSM Parameter Store access
            SSM_POLICY_NAME="${INSTANCE_ROLE_NAME}-SSMAccess"
            SSM_POLICY_DOC='{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters",
                    "ssm:GetParametersByPath",
                    "ssm:GetParameter"
                  ],
                  "Resource": "arn:aws:ssm:eu-north-1:*:parameter/prepzo-bot/*"
                }
              ]
            }'
            
            aws iam create-policy --policy-name ${SSM_POLICY_NAME} --policy-document "$SSM_POLICY_DOC" || true
            SSM_POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='${SSM_POLICY_NAME}'].Arn" --output text)
            
            # Attach required policies for the EC2 instance
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn "$SSM_POLICY_ARN"
            
            # Create instance profile
            aws iam create-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} || true
            aws iam add-role-to-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --role-name ${INSTANCE_ROLE_NAME} || true
            
            # Wait for profile to be ready
            echo "Waiting for instance profile to be ready..."
            sleep 15
          else
            echo "EC2 instance role ${INSTANCE_ROLE_NAME} already exists"
          fi
          
          INSTANCE_PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --query "InstanceProfile.Arn" --output text)
          echo "Instance profile ARN: ${INSTANCE_PROFILE_ARN}"

      - name: Create Security Group
        run: |
          # Create security group for the EC2 instance
          SG_NAME="PrepzoBotSecurityGroup"
          
          # Check if security group exists
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${SG_NAME}" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)
          
          if [ "$SG_ID" == "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating security group: ${SG_NAME}"
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
            
            SG_ID=$(aws ec2 create-security-group --group-name ${SG_NAME} --description "Security group for Prepzo Bot" --vpc-id ${VPC_ID} --query "GroupId" --output text)
            
            # Add inbound rules
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 8080 --cidr 0.0.0.0/0
            
            echo "Security group created with ID: ${SG_ID}"
          else
            echo "Security group ${SG_NAME} already exists with ID: ${SG_ID}"
          fi

      - name: Create and Configure EC2 Instance
        id: create_instance
        run: |
          # Use Amazon Linux 2 AMI (Updated AMI ID for eu-north-1 region)
          AMI_ID="ami-040d60c831d02d41c"  # Amazon Linux 2 AMI for eu-north-1
          INSTANCE_TYPE="t3.small"
          
          # User data script to install CodeDeploy agent
          USER_DATA=$(cat <<'EOF'
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-eu-north-1.s3.eu-north-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          chkconfig codedeploy-agent on
          
          # Install Amazon SSM agent (usually pre-installed, but just in case)
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create working directories
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          chown -R ec2-user:ec2-user /home/ec2-user/.env
          
          # Install Python 3
          yum install -y python3 python3-pip python3-devel gcc
          
          # Make sure SSH is running and enabled
          systemctl enable sshd
          systemctl start sshd
          EOF
          )
          
          # Convert to base64 for AWS EC2 run-instances
          USER_DATA_B64=$(echo "$USER_DATA" | base64 -w 0)
          
          # Get security group ID
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=PrepzoBotSecurityGroup" --query "SecurityGroups[0].GroupId" --output text)
          
          # Check if instance already exists
          INSTANCE_NAME="PrepzoBot"
          EXISTING_INSTANCE=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${INSTANCE_NAME}" "Name=instance-state-name,Values=running,pending,stopping,stopped" --query "Reservations[0].Instances[0].InstanceId" --output text)
          
          if [ "$EXISTING_INSTANCE" != "None" ] && [ ! -z "$EXISTING_INSTANCE" ]; then
            echo "Instance ${INSTANCE_NAME} already exists with ID: ${EXISTING_INSTANCE}"
            INSTANCE_ID=$EXISTING_INSTANCE
            
            # Ensure the instance is running
            INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].State.Name" --output text)
            if [ "$INSTANCE_STATE" == "stopped" ]; then
              echo "Starting instance ${INSTANCE_ID}"
              aws ec2 start-instances --instance-ids ${INSTANCE_ID}
              
              # Wait for the instance to be running
              echo "Waiting for instance to start..."
              aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
            fi
          else
            echo "Launching new EC2 instance..."
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ${AMI_ID} \
              --instance-type ${INSTANCE_TYPE} \
              --security-group-ids ${SG_ID} \
              --user-data $(echo "$USER_DATA" | base64 -w 0) \
              --iam-instance-profile Name=PrepzoBotEC2Role \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${INSTANCE_NAME}}]" \
              --query "Instances[0].InstanceId" \
              --output text)
              
            echo "Launched instance: ${INSTANCE_ID}"
            
            # Wait for the instance to be running
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
            
            # Wait a bit longer for userdata script to complete
            echo "Waiting for instance initialization..."
            sleep 60
          fi
          
          # Get instance details
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          PRIVATE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].PrivateIpAddress" --output text)
          
          echo "Instance ${INSTANCE_ID} is running"
          echo "Public IP: ${PUBLIC_IP}"
          echo "Private IP: ${PRIVATE_IP}"
          
          # Set outputs for subsequent steps
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_OUTPUT
          echo "private_ip=${PRIVATE_IP}" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy Application
        run: |
          APP_NAME="PrepzoBotApp"
          
          # Check if the application already exists
          APP_EXISTS=$(aws deploy get-application --application-name ${APP_NAME} 2>/dev/null || echo "")
          
          if [ -z "$APP_EXISTS" ]; then
            echo "Creating CodeDeploy application: ${APP_NAME}"
            aws deploy create-application --application-name ${APP_NAME}
          else
            echo "CodeDeploy application ${APP_NAME} already exists"
          fi

      - name: Create CodeDeploy Deployment Group
        run: |
          APP_NAME="PrepzoBotApp"
          DEPLOYMENT_GROUP="PrepzoBotDeploymentGroup"
          
          # Get instance ID from previous step
          INSTANCE_ID="${{ steps.create_instance.outputs.instance_id }}"
          
          # Get CodeDeploy service role ARN
          CODEDEPLOY_ROLE_ARN=$(aws iam get-role --role-name PrepzoBotCodeDeployRole --query "Role.Arn" --output text)
          
          # Check if deployment group exists
          DG_EXISTS=$(aws deploy get-deployment-group --application-name ${APP_NAME} --deployment-group-name ${DEPLOYMENT_GROUP} 2>/dev/null || echo "")
          
          if [ -z "$DG_EXISTS" ]; then
            echo "Creating CodeDeploy deployment group: ${DEPLOYMENT_GROUP}"
            aws deploy create-deployment-group \
              --application-name ${APP_NAME} \
              --deployment-group-name ${DEPLOYMENT_GROUP} \
              --service-role-arn ${CODEDEPLOY_ROLE_ARN} \
              --ec2-tag-filters Key=Name,Value=PrepzoBot,Type=KEY_AND_VALUE \
              --deployment-config-name CodeDeployDefault.AllAtOnce
          else
            echo "CodeDeploy deployment group ${DEPLOYMENT_GROUP} already exists"
          fi

      - name: Create deployment archive
        run: |
          echo "Creating deployment archive"
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Create a zip file of the application code
          zip -r deploy.zip . -x "venv/*" "__pycache__/*" ".git/*" ".github/*" ".gitignore"
          
          # Upload the zip file to S3
          aws s3 cp deploy.zip s3://prepzo-bot-deployments/

      - name: Deploy with CodeDeploy
        run: |
          APP_NAME="PrepzoBotApp"
          DEPLOYMENT_GROUP="PrepzoBotDeploymentGroup"
          
          echo "Deploying application with CodeDeploy"
          
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${APP_NAME} \
            --deployment-group-name ${DEPLOYMENT_GROUP} \
            --revision "revisionType=S3,s3Location={bucket=prepzo-bot-deployments,key=deploy.zip,bundleType=zip}" \
            --description "Deployment from GitHub Actions - $(date +'%Y-%m-%d %H:%M:%S')" \
            --query "deploymentId" --output text)
          
          echo "Deployment started with ID: ${DEPLOYMENT_ID}"
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id ${DEPLOYMENT_ID}
          
          echo "Deployment completed successfully"

      - name: Output deployment details
        run: |
          PUBLIC_IP="${{ steps.create_instance.outputs.public_ip }}"
          
          echo "Deployment completed successfully!"
          echo "========================================"
          echo "Application URL: http://${PUBLIC_IP}:8080"
          echo "Server IP: ${PUBLIC_IP}"
          echo "========================================" 