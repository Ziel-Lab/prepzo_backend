name: Deploy to EC2 with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Verify AWS credentials
        run: aws sts get-caller-identity

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 requests

      - name: Update version information
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date +'%Y-%m-%d')
          
          # Update version.py with the git commit
          sed -i "s/GIT_COMMIT = \"unknown\"/GIT_COMMIT = \"$GIT_COMMIT\"/" version.py
          sed -i "s/BUILD_DATE = \".*\"/BUILD_DATE = \"$BUILD_DATE\"/" version.py
          
          echo "Version info updated with commit $GIT_COMMIT and build date $BUILD_DATE"

      - name: Store secrets in AWS Parameter Store
        run: |
          # Store all secrets in AWS Parameter Store
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_URL" --value "${{ secrets.SUPABASE_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_URL"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_SERVICE_ROLE_KEY" --value "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_SERVICE_ROLE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SUPABASE_KEY" --value "${{ secrets.SUPABASE_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SUPABASE_KEY"
          aws ssm put-parameter --name "/prepzo-bot/OPENAI_API_KEY" --value "${{ secrets.OPENAI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store OPENAI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/DEEPGRAM_API_KEY" --value "${{ secrets.DEEPGRAM_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store DEEPGRAM_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_URL" --value "${{ secrets.LIVEKIT_URL }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_URL"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_KEY" --value "${{ secrets.LIVEKIT_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/LIVEKIT_API_SECRET" --value "${{ secrets.LIVEKIT_API_SECRET }}" --type "SecureString" --overwrite || echo "Warning: Failed to store LIVEKIT_API_SECRET"
          aws ssm put-parameter --name "/prepzo-bot/CARTESIA_API_KEY" --value "${{ secrets.CARTESIA_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store CARTESIA_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/ELEVENLABS_API_KEY" --value "${{ secrets.ELEVENLABS_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store ELEVENLABS_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/SERPAPI_KEY" --value "${{ secrets.SERPAPI_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store SERPAPI_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GEMINI_API_KEY" --value "${{ secrets.GEMINI_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GEMINI_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_API_KEY" --value "${{ secrets.PINECONE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_REGION" --value "${{ secrets.PINECONE_REGION }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_REGION"
          aws ssm put-parameter --name "/prepzo-bot/PINECONE_HOST" --value "${{ secrets.PINECONE_HOST }}" --type "SecureString" --overwrite || echo "Warning: Failed to store PINECONE_HOST"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_API_KEY" --value "${{ secrets.GOOGLE_API_KEY }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_API_KEY"
          aws ssm put-parameter --name "/prepzo-bot/GOOGLE_APPLICATION_CREDENTIALS" --value "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" --type "SecureString" --overwrite || echo "Warning: Failed to store GOOGLE_APPLICATION_CREDENTIALS"
          
          echo "Secrets stored in AWS Parameter Store"

      - name: Create EC2 Instance Role
        run: |
          # Create IAM role for EC2 instance
          INSTANCE_ROLE_NAME="PrepzoBotEC2Role"
          
          # Create trust policy for EC2
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${INSTANCE_ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating EC2 instance role: ${INSTANCE_ROLE_NAME}"
            aws iam create-role --role-name ${INSTANCE_ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Attach required policies for the EC2 instance
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
            aws iam attach-role-policy --role-name ${INSTANCE_ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
            
            # Create instance profile
            aws iam create-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME}
            aws iam add-role-to-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --role-name ${INSTANCE_ROLE_NAME}
            
            # Wait for profile to be ready
            echo "Waiting for instance profile to be ready..."
            sleep 15
          else
            echo "EC2 instance role ${INSTANCE_ROLE_NAME} already exists"
          fi
          
          INSTANCE_PROFILE_ARN=$(aws iam get-instance-profile --instance-profile-name ${INSTANCE_ROLE_NAME} --query "InstanceProfile.Arn" --output text)
          echo "Instance profile ARN: ${INSTANCE_PROFILE_ARN}"

      - name: Create Security Group
        run: |
          # Create security group for the EC2 instance
          SG_NAME="PrepzoBotSecurityGroup"
          
          # Check if security group exists
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${SG_NAME}" --query "SecurityGroups[0].GroupId" --output text 2>/dev/null)
          
          if [ "$SG_ID" == "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating security group: ${SG_NAME}"
            VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query "Vpcs[0].VpcId" --output text)
            
            SG_ID=$(aws ec2 create-security-group --group-name ${SG_NAME} --description "Security group for Prepzo Bot" --vpc-id ${VPC_ID} --query "GroupId" --output text)
            
            # Add inbound rules
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SG_ID} --protocol tcp --port 8080 --cidr 0.0.0.0/0
            
            echo "Security group created with ID: ${SG_ID}"
          else
            echo "Security group ${SG_NAME} already exists with ID: ${SG_ID}"
          fi

      - name: Create and Configure EC2 Instance
        id: create_instance
        run: |
          # Use Amazon Linux 2 AMI (Updated AMI ID for eu-north-1 region)
          AMI_ID="ami-040d60c831d02d41c"  # Amazon Linux 2 AMI for eu-north-1
          INSTANCE_TYPE="t3.small"
          EC2_KEY_NAME="prepzo-bot-key" # This should be a key pair that exists in your account
          
          # User data script to install CodeDeploy agent
          USER_DATA=$(cat <<'EOF'
          #!/bin/bash
          # Update system
          yum update -y
          
          # Install CodeDeploy agent
          yum install -y ruby wget
          cd /home/ec2-user
          wget https://aws-codedeploy-eu-north-1.s3.eu-north-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          chkconfig codedeploy-agent on
          
          # Install Amazon SSM agent (usually pre-installed, but just in case)
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create working directories
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chown -R ec2-user:ec2-user /home/ec2-user/prepzo_bot
          chown -R ec2-user:ec2-user /home/ec2-user/.env
          
          # Install Python 3
          yum install -y python3 python3-pip
          
          # Make sure SSH is running and enabled
          systemctl enable sshd
          systemctl start sshd
          EOF
          )
          
          # Convert to base64 for AWS EC2 run-instances
          USER_DATA_B64=$(echo "$USER_DATA" | base64 -w 0)
          
          # Get security group ID
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=PrepzoBotSecurityGroup" --query "SecurityGroups[0].GroupId" --output text)
          
          echo "Launching new EC2 instance..."
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${AMI_ID} \
            --instance-type ${INSTANCE_TYPE} \
            --key-name ${EC2_KEY_NAME} \
            --security-group-ids ${SG_ID} \
            --user-data "$(echo "$USER_DATA" | base64 -w 0)" \
            --iam-instance-profile Name=PrepzoBotEC2Role \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=PrepzoBotInstance}]" \
            --query "Instances[0].InstanceId" \
            --output text)
            
          echo "New instance created with ID: ${INSTANCE_ID}"
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          
          # Wait for instance to become running
          echo "Waiting for instance to be in running state..."
          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
          
          # Wait for instance status checks to pass
          echo "Waiting for instance status checks to pass (this can take a few minutes)..."
          aws ec2 wait instance-status-ok --instance-ids ${INSTANCE_ID}
          
          # Get instance public IP
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${INSTANCE_ID} --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "New instance public IP: ${INSTANCE_IP}"
          echo "instance_ip=${INSTANCE_IP}" >> $GITHUB_OUTPUT
          
          # Verify the security group allows SSH connections
          echo "Verifying security group rules..."
          aws ec2 describe-security-groups --group-ids ${SG_ID} --query "SecurityGroups[0].IpPermissions[?ToPort==\`22\`]"
          
          # Add a delay to ensure the instance is fully booted and SSH is available
          echo "Waiting 2 minutes for instance to fully initialize and SSH to become available..."
          sleep 120

      - name: Fix script line endings and permissions
        run: |
          # Fix line endings (convert CRLF to LF)
          sed -i 's/\r$//' scripts/deploy.sh
          sed -i 's/\r$//' scripts/check_deployment.py
          
          # Make scripts executable
          chmod +x scripts/deploy.sh
          chmod +x scripts/check_deployment.py
          
          # Display script for debugging
          echo "Script contents:"
          cat scripts/deploy.sh | head -20

      - name: Create deployment package
        run: |
          # Create deployment package directly instead of using the script
          echo "Creating deployment package manually..."
          
          # Create temp directory for deployment
          TEMP_DIR=$(mktemp -d)
          mkdir -p $TEMP_DIR/scripts
          mkdir -p $TEMP_DIR/etc/systemd/system
          
          # Create appspec.yml
          cat > $TEMP_DIR/appspec.yml << 'APPSPEC_EOF'
          version: 0.0
          os: linux
          files:
            - source: /
              destination: /home/ec2-user/prepzo_bot
          hooks:
            BeforeInstall:
              - location: scripts/before_install.sh
                timeout: 300
                runas: root
            AfterInstall:
              - location: scripts/after_install.sh
                timeout: 300
                runas: root
            ApplicationStart:
              - location: scripts/start_application.sh
                timeout: 300
                runas: root
            ValidateService:
              - location: scripts/validate_service.sh
                timeout: 300
                runas: root
          APPSPEC_EOF
          
          cat > $TEMP_DIR/scripts/before_install.sh << 'BEFORE_INSTALL_EOF'
          #!/bin/bash
          echo "Before install starting"
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chmod 755 /home/ec2-user/prepzo_bot
          chmod 755 /home/ec2-user/.env
          echo "Before install completed"
          exit 0
          BEFORE_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/after_install.sh << 'AFTER_INSTALL_EOF'
          #!/bin/bash
          echo "After install starting"
          echo "After install completed"
          exit 0
          AFTER_INSTALL_EOF
          
          cat > $TEMP_DIR/scripts/start_application.sh << 'START_EOF'
          #!/bin/bash
          echo "Start application starting"
          # Create a simple success marker file
          echo "Running" > /home/ec2-user/prepzo_bot/status.txt
          echo "Start application completed"
          exit 0
          START_EOF
          
          cat > $TEMP_DIR/scripts/validate_service.sh << 'VALIDATE_EOF'
          #!/bin/bash
          echo "Validate service starting"
          echo "Validate service completed"
          # Always succeed
          exit 0
          VALIDATE_EOF
          
          # Make scripts executable
          chmod +x $TEMP_DIR/scripts/*.sh
          
          # Save current git commit
          git rev-parse HEAD > $TEMP_DIR/GIT_COMMIT
          
          # Copy application files to deployment package
          echo "Copying application files to deployment package..."
          rsync -a --exclude={.git,.github,node_modules,infrastructure,cdk.out,.env} . $TEMP_DIR/ || {
            echo "rsync failed, falling back to manual copy"
            find . -name "*.py" -type f -exec cp --parents {} $TEMP_DIR/ \;
            
            if [ -f "requirements.txt" ]; then
              cp requirements.txt $TEMP_DIR/
            fi
          }
          
          # Create ZIP archive
          echo "Creating ZIP archive..."
          (cd $TEMP_DIR && zip -r "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip" .)
          
          # Verify the archive was created
          ls -l "$GITHUB_WORKSPACE/prepzo-bot-deployment.zip"
          echo "Deployment package created: prepzo-bot-deployment.zip"

      - name: Create S3 bucket for deployment artifacts
        run: |
          # Generate a valid S3 bucket name (lowercase, no underscores)
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')"
          
          # Check if bucket exists
          BUCKET_EXISTS=$(aws s3api list-buckets --query "Buckets[?Name=='${BUCKET_NAME}'].Name" --output text)
          
          if [ -z "$BUCKET_EXISTS" ]; then
            echo "Creating S3 bucket: ${BUCKET_NAME}"
            aws s3api create-bucket --bucket ${BUCKET_NAME} --create-bucket-configuration LocationConstraint=eu-north-1
            aws s3api put-bucket-encryption --bucket ${BUCKET_NAME} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket ${BUCKET_NAME} already exists"
          fi

      - name: Create CodeDeploy application
        id: create_app
        run: |
          # Check if CodeDeploy application exists
          APP_NAME="prepzo-bot"
          APP_EXISTS=$(aws deploy list-applications --query "applications[?contains(@, '${APP_NAME}')]" --output text)
          
          if [ -z "$APP_EXISTS" ]; then
            echo "Creating CodeDeploy application: ${APP_NAME}"
            aws deploy create-application --application-name ${APP_NAME}
          else
            echo "CodeDeploy application ${APP_NAME} already exists"
          fi
          
          echo "application_name=${APP_NAME}" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy Service Role
        run: |
          # Create IAM role for CodeDeploy
          ROLE_NAME="PrepzoBotCodeDeployRole"
          
          # Create trust policy for CodeDeploy
          TRUST_POLICY='{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "codedeploy.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }'
          
          # Check if role exists
          ROLE_EXISTS=$(aws iam get-role --role-name ${ROLE_NAME} --query "Role.Arn" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating CodeDeploy service role: ${ROLE_NAME}"
            aws iam create-role --role-name ${ROLE_NAME} --assume-role-policy-document "$TRUST_POLICY"
            
            # Attach required policy for CodeDeploy
            aws iam attach-role-policy --role-name ${ROLE_NAME} --policy-arn arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
            
            echo "Waiting for role to be ready..."
            sleep 10
          else
            echo "CodeDeploy service role ${ROLE_NAME} already exists"
          fi
          
          echo "codedeploy_role_arn=$(aws iam get-role --role-name ${ROLE_NAME} --query 'Role.Arn' --output text)" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy deployment group
        id: create_deployment_group
        run: |
          # Get instance ID
          INSTANCE_ID="${{ steps.create_instance.outputs.instance_id }}"
          APP_NAME="${{ steps.create_app.outputs.application_name }}"
          DEPLOYMENT_GROUP="prepzo-bot-deployment-group"
          SERVICE_ROLE_ARN=$(aws iam get-role --role-name PrepzoBotCodeDeployRole --query "Role.Arn" --output text)
          
          # Check if deployment group exists
          DG_EXISTS=$(aws deploy list-deployment-groups --application-name ${APP_NAME} --query "deploymentGroups[?contains(@, '${DEPLOYMENT_GROUP}')]" --output text || echo "")
          
          if [ -z "$DG_EXISTS" ]; then
            echo "Creating CodeDeploy deployment group: ${DEPLOYMENT_GROUP}"
            aws deploy create-deployment-group \
              --application-name ${APP_NAME} \
              --deployment-group-name ${DEPLOYMENT_GROUP} \
              --deployment-config-name CodeDeployDefault.AllAtOnce \
              --ec2-tag-filters Key=Name,Value=PrepzoBotInstance,Type=KEY_AND_VALUE \
              --service-role-arn ${SERVICE_ROLE_ARN}
          else
            echo "CodeDeploy deployment group ${DEPLOYMENT_GROUP} already exists"
          fi
          
          echo "deployment_group=${DEPLOYMENT_GROUP}" >> $GITHUB_OUTPUT

      - name: Create deployment package for CodeDeploy
        id: create_deployment
        run: |
          # Create a proper CodeDeploy application bundle
          mkdir -p codedeploy-bundle
          
          # Create appspec.yml for CodeDeploy
          cat > codedeploy-bundle/appspec.yml << 'EOF'
          version: 0.0
          os: linux
          files:
            - source: /
              destination: /home/ec2-user/prepzo_bot
          hooks:
            BeforeInstall:
              - location: scripts/before_install.sh
                timeout: 300
                runas: root
            AfterInstall:
              - location: scripts/after_install.sh
                timeout: 300
                runas: root
            ApplicationStart:
              - location: scripts/start_application.sh
                timeout: 300
                runas: root
            ValidateService:
              - location: scripts/validate_service.sh
                timeout: 300
                runas: root
          EOF
          
          # Create scripts directory
          mkdir -p codedeploy-bundle/scripts
          
          # Create deployment scripts
          cat > codedeploy-bundle/scripts/before_install.sh << 'EOF'
          #!/bin/bash
          echo "Before install starting"
          mkdir -p /home/ec2-user/prepzo_bot
          mkdir -p /home/ec2-user/.env
          chmod 755 /home/ec2-user/prepzo_bot
          chmod 755 /home/ec2-user/.env
          echo "Before install completed"
          exit 0
          EOF
          
          cat > codedeploy-bundle/scripts/after_install.sh << 'EOF'
          #!/bin/bash
          echo "After install starting"
          
          # Install Python dependencies
          cd /home/ec2-user/prepzo_bot
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          
          # Setup environment
          aws ssm get-parameters-by-path --path "/prepzo-bot/" --with-decryption --query "Parameters[*].{Name:Name,Value:Value}" | python3 -c '
          import json
          import sys
          import os
          
          params = json.load(sys.stdin)
          env_file = "/home/ec2-user/.env/prepzo_bot.env"
          with open(env_file, "w") as f:
              for param in params:
                  name = param["Name"].split("/")[-1]
                  value = param["Value"]
                  f.write(f"{name}={value}\n")
          
          print(f"Environment variables written to {env_file}")
          '
          
          # Create systemd service file
          cat > /etc/systemd/system/prepzo-bot.service << 'SYSTEMD_EOF'
          [Unit]
          Description=Prepzo Bot Service
          After=network.target
          
          [Service]
          Type=simple
          User=ec2-user
          WorkingDirectory=/home/ec2-user/prepzo_bot
          EnvironmentFile=/home/ec2-user/.env/prepzo_bot.env
          ExecStart=/usr/bin/python3 /home/ec2-user/prepzo_bot/main.py start
          StandardOutput=journal
          StandardError=journal
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          SYSTEMD_EOF
          
          systemctl daemon-reload
          
          echo "After install completed"
          exit 0
          EOF
          
          cat > codedeploy-bundle/scripts/start_application.sh << 'EOF'
          #!/bin/bash
          echo "Starting application"
          systemctl enable prepzo-bot
          systemctl start prepzo-bot
          echo "Application started"
          exit 0
          EOF
          
          cat > codedeploy-bundle/scripts/validate_service.sh << 'EOF'
          #!/bin/bash
          echo "Validating service"
          
          # Check if service is running
          if systemctl is-active --quiet prepzo-bot; then
            echo "Prepzo bot service is running"
            exit 0
          else
            echo "ERROR: Prepzo bot service is not running"
            echo "Service status:"
            systemctl status prepzo-bot
            echo "Service logs:"
            journalctl -u prepzo-bot -n 50
            exit 1
          fi
          EOF
          
          # Make scripts executable
          chmod +x codedeploy-bundle/scripts/*.sh
          
          # Copy application files to bundle
          cp -r *.py codedeploy-bundle/
          cp -r requirements.txt codedeploy-bundle/ || echo "No requirements.txt file found"
          
          # Create the bundle ZIP file
          cd codedeploy-bundle
          zip -r ../prepzo-bot-bundle.zip .
          cd ..
          
          # Upload to S3
          BUCKET_NAME="prepzo-bot-deployment-$(echo ${{ github.repository }} | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')"
          BUNDLE_S3_KEY="bundles/prepzo-bot-${GITHUB_SHA}.zip"
          
          aws s3 cp prepzo-bot-bundle.zip s3://${BUCKET_NAME}/${BUNDLE_S3_KEY}
          
          echo "bundle_s3_bucket=${BUCKET_NAME}" >> $GITHUB_OUTPUT
          echo "bundle_s3_key=${BUNDLE_S3_KEY}" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 with CodeDeploy
        run: |
          APP_NAME="${{ steps.create_app.outputs.application_name }}"
          DEPLOYMENT_GROUP="${{ steps.create_deployment_group.outputs.deployment_group }}"
          BUCKET_NAME="${{ steps.create_deployment.outputs.bundle_s3_bucket }}"
          BUNDLE_S3_KEY="${{ steps.create_deployment.outputs.bundle_s3_key }}"
          
          # Create deployment
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${APP_NAME} \
            --deployment-group-name ${DEPLOYMENT_GROUP} \
            --s3-location bucket=${BUCKET_NAME},key=${BUNDLE_S3_KEY},bundleType=zip \
            --query "deploymentId" --output text)
          
          echo "Deployment created with ID: ${DEPLOYMENT_ID}"
          
          # Wait for deployment to complete
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id ${DEPLOYMENT_ID}
          
          # Get deployment status
          DEPLOYMENT_STATUS=$(aws deploy get-deployment --deployment-id ${DEPLOYMENT_ID} --query "deploymentInfo.status" --output text)
          
          if [ "$DEPLOYMENT_STATUS" == "Succeeded" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed with status: ${DEPLOYMENT_STATUS}"
            aws deploy get-deployment --deployment-id ${DEPLOYMENT_ID}
            exit 1
          fi
          
          # Print instance info
          INSTANCE_IP="${{ steps.create_instance.outputs.instance_ip }}"
          echo "===================================================================="
          echo "🚀 DEPLOYMENT COMPLETED!"
          echo "===================================================================="
          echo "Instance ID: ${{ steps.create_instance.outputs.instance_id }}"
          echo "Public IP: ${INSTANCE_IP}"
          echo "SSH: ssh ec2-user@${INSTANCE_IP}"
          echo "====================================================================" 